import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import folium
from streamlit_folium import st_folium
from datetime import datetime, timedelta
from utils.ai_insights import generate_ai_insight
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
import io

def generate_pdf_report(report_content, report_type, recipient, urgency):
    """Generate PDF report using ReportLab"""
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    styles = getSampleStyleSheet()

    # Custom styles
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        spaceAfter=30,
        textColor=colors.darkblue,
        alignment=1  # Center alignment
    )

    header_style = ParagraphStyle(
        'CustomHeader',
        parent=styles['Heading2'],
        fontSize=14,
        spaceAfter=12,
        textColor=colors.darkred
    )

    # Build PDF content
    story = []

    # Title
    story.append(Paragraph("🚨 HEALTH SURVEILLANCE REPORT", title_style))
    story.append(Spacer(1, 12))

    # Header info
    header_info = f"""
    <b>Report Type:</b> {report_type}<br/>
    <b>Recipient:</b> {recipient}<br/>
    <b>Urgency Level:</b> {urgency}<br/>
    <b>Generated:</b> {datetime.now().strftime('%Y-%m-%d %H:%M')}<br/>
    <b>Classification:</b> OFFICIAL USE ONLY
    """
    story.append(Paragraph(header_info, styles['Normal']))
    story.append(Spacer(1, 20))

    # Report content
    # Split content into sections and format
    sections = report_content.split('\n\n')
    for section in sections:
        if section.strip():
            if section.startswith('**') and section.endswith('**'):
                # Header
                clean_header = section.replace('**', '')
                story.append(Paragraph(clean_header, header_style))
            else:
                # Regular content
                # Convert markdown-style formatting to HTML properly
                import re
                # Replace **text** with <b>text</b> using regex
                formatted_section = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', section)
                formatted_section = formatted_section.replace('- ', '• ')

                # Clean any remaining problematic characters that could break XML parsing
                formatted_section = formatted_section.replace('<para>', '').replace('</para>', '')
                formatted_section = formatted_section.replace('<b><b>', '<b>').replace('</b></b>', '</b>')

                # Escape any other potential XML/HTML issues
                formatted_section = formatted_section.replace('&', '&amp;')
                formatted_section = formatted_section.replace('<', '&lt;').replace('>', '&gt;')
                # But restore the HTML tags we want to keep
                formatted_section = formatted_section.replace('&lt;b&gt;', '<b>').replace('&lt;/b&gt;', '</b>')
                formatted_section = formatted_section.replace('&lt;br/&gt;', '<br/>')
                formatted_section = formatted_section.replace('&lt;i&gt;', '<i>').replace('&lt;/i&gt;', '</i>')
                story.append(Paragraph(formatted_section, styles['Normal']))
                story.append(Spacer(1, 6))

    # Footer
    story.append(Spacer(1, 30))
    footer_text = """
    <i>Generated by PharmaCity Regional Intelligence System<br/>
    This report contains confidential health surveillance data.<br/>
    Distribution restricted to authorized personnel only.</i>
    """
    story.append(Paragraph(footer_text, styles['Italic']))

    # Build PDF
    doc.build(story)
    buffer.seek(0)
    return buffer.getvalue()

def render_regional_intelligence(sales_df, disease_df, branches_df):
    """Render regional intelligence network analysis"""
    
    st.header("🌍 Regional Health Intelligence Network")
    st.markdown("*Multi-pharmacy disease surveillance and correlation analysis*")
    
    # Network Overview
    col1, col2, col3, col4 = st.columns(4)
    
    total_pharmacies = len(branches_df)
    active_alerts = len(disease_df[disease_df['alert_level'].isin(['Critical', 'Warning'])])
    districts_affected = disease_df[disease_df['alert_level'] != 'Normal']['district'].nunique()
    
    # Calculate network-wide spike
    recent_sales = disease_df.tail(len(branches_df))
    network_spike = recent_sales['spike_percentage'].mean()
    
    with col1:
        st.metric("🏥 Network Pharmacies", total_pharmacies)
    
    with col2:
        st.metric("🚨 Active Alerts", active_alerts, 
                 delta="Network-wide" if active_alerts > 5 else "Localized")
    
    with col3:
        st.metric("📍 Affected Districts", districts_affected)
    
    with col4:
        st.metric("📈 Network Spike", f"{network_spike:.1f}%",
                 delta="vs baseline")
    
    st.divider()
    
    # Geographic Heat Map
    st.subheader("🗺️ Real-Time Disease Heat Map")
    
    # Date selector
    selected_date = st.date_input(
        "Select Date for Analysis",
        value=pd.to_datetime(disease_df['date'].max()).date(),
        min_value=pd.to_datetime(disease_df['date'].min()).date(),
        max_value=pd.to_datetime(disease_df['date'].max()).date()
    )
    
    # Filter data for selected date
    date_str = selected_date.strftime('%Y-%m-%d')
    day_data = disease_df[disease_df['date'] == date_str].merge(
        branches_df, left_on='branch_id', right_on='id', suffixes=('', '_branch')
    )
    
    # Create interactive map
    if len(day_data) > 0:
        # Center map on Singapore
        m = folium.Map(location=[1.35, 103.82], zoom_start=11)
        
        for idx, row in day_data.iterrows():
            # Color based on alert level
            if row['alert_level'] == 'Critical':
                color = 'red'
                icon = 'exclamation-triangle'
                radius = 25
            elif row['alert_level'] == 'Warning':
                color = 'orange'
                icon = 'exclamation'
                radius = 20
            elif row['alert_level'] == 'Monitor':
                color = 'yellow'
                icon = 'eye'
                radius = 15
            else:
                color = 'green'
                icon = 'check'
                radius = 10
            
            # Add circle marker for heat effect
            folium.Circle(
                location=[row['lat'], row['lon']],
                radius=radius * row['spike_percentage'],  # Size based on spike
                color=color,
                fill=True,
                fillOpacity=0.3,
                popup=f"Spike: {row['spike_percentage']:.1f}%"
            ).add_to(m)
            
            # Add marker
            folium.Marker(
                location=[row['lat'], row['lon']],
                popup=folium.Popup(f"""
                    <div style="width:200px">
                        <h4>{row['branch_name']}</h4>
                        <p><b>Alert:</b> {row['alert_level']}</p>
                        <p><b>Spike:</b> {row['spike_percentage']:.1f}%</p>
                        <p><b>Sales:</b> {row['daily_sales_units']} units</p>
                        <p><b>Baseline:</b> {row['baseline_avg']:.1f}</p>
                        <p><b>Est. Patients:</b> {row['estimated_affected_patients']}</p>
                    </div>
                """, max_width=250),
                tooltip=row['branch_name'],
                icon=folium.Icon(color=color, icon=icon, prefix='fa')
            ).add_to(m)
        
        st_folium(m, width=1400, height=500)
    
    st.divider()
    
    # External Factors Analysis
    st.subheader("🌦️ External Factors Correlation")
    
    # Simulate external data (in real system, fetch from APIs)
    external_factors = generate_external_factors(selected_date)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### 📰 Recent News & Events")
        for news in external_factors['news']:
            st.info(f"**{news['date']}:** {news['headline']}")
    
    with col2:
        st.markdown("### 🌡️ Weather Patterns")
        for weather in external_factors['weather']:
            st.info(f"**{weather['date']}:** {weather['condition']} - {weather['temp']}°C")
    
    # Initialize network summary for use in government report
    network_summary = f"""
REGIONAL HEALTH INTELLIGENCE ANALYSIS

Date: {selected_date}

NETWORK OVERVIEW:
- Total Pharmacies: {total_pharmacies}
- Active Alerts: {active_alerts}
- Affected Districts: {day_data['district'].unique().tolist() if 'district' in day_data.columns else 'N/A'}
- Network-wide Spike: {network_spike:.1f}%

GEOGRAPHIC PATTERN:
{day_data[['branch_name', 'spike_percentage', 'daily_sales_units', 'alert_level']].to_string() if len(day_data) > 0 else 'No data available'}
"""

    # Correlation Analysis
    st.subheader("🔗 AI Correlation Analysis")

    if st.button("🧠 Analyze Correlations with External Factors", type="primary"):
        with st.spinner("AI analyzing patterns across all factors..."):
            
            # Add external factors to network summary
            network_summary += f"""

EXTERNAL FACTORS:

News & Events:
{chr(10).join([f"- {n['date']}: {n['headline']}" for n in external_factors['news']])}

Weather:
{chr(10).join([f"- {w['date']}: {w['condition']}, {w['temp']}°C" for w in external_factors['weather']])}

HISTORICAL CONTEXT:
- 7-day trend: {day_data['spike_percentage'].mean():.1f}% average spike
{f"- Peak district: {day_data.loc[day_data['spike_percentage'].idxmax(), 'district']}" if len(day_data) > 0 and 'district' in day_data.columns else ""}
{f"- Peak pharmacy: {day_data.loc[day_data['spike_percentage'].idxmax(), 'branch_name']}" if len(day_data) > 0 else ""}
"""
            
            prompt = """Analyze this multi-pharmacy health data and correlate with external factors:

1. **Primary Health Finding** (What disease/condition is spreading?)
2. **Geographic Pattern** (Which areas most affected and why?)
3. **External Correlations** (How do news/weather/events relate?)
   - Weather impact (temperature, rain → illness type)
   - Events impact (gatherings → disease spread)
   - News relevance (reported outbreaks confirmation)
4. **Confidence Level** (High/Medium/Low and reasoning)
5. **Spread Prediction** (Which districts at risk next?)
6. **Root Cause Analysis** (Why this outbreak here, now?)
7. **Recommended Actions** (For government/health authorities)

Be specific and data-driven."""
            
            correlation_report = generate_ai_insight(prompt, network_summary, max_tokens=1200)
            
            st.success(correlation_report)
            
            # Store for government report
            st.session_state['correlation_analysis'] = correlation_report
    
    st.divider()
    
    # Trend Analysis - Spike/Dip Patterns
    st.subheader("📊 Network-Wide Trend Analysis")
    
    # Aggregate daily spikes across all pharmacies
    daily_network_trends = disease_df.groupby('date').agg({
        'spike_percentage': 'mean',
        'daily_sales_units': 'sum',
        'estimated_affected_patients': 'sum'
    }).reset_index()
    
    daily_network_trends['date'] = pd.to_datetime(daily_network_trends['date'])
    
    col1, col2 = st.columns(2)
    
    with col1:
        fig_trend = px.line(
            daily_network_trends,
            x='date',
            y='spike_percentage',
            title="Network-Wide Medicine Spike Trend",
            labels={'spike_percentage': 'Avg Spike %', 'date': 'Date'}
        )
        
        # Add threshold lines
        fig_trend.add_hline(y=50, line_dash="dash", line_color="orange")
        fig_trend.add_hline(y=100, line_dash="dash", line_color="red")
        
        st.plotly_chart(fig_trend, use_container_width=True)
    
    with col2:
        fig_patients = px.area(
            daily_network_trends,
            x='date',
            y='estimated_affected_patients',
            title="Estimated Total Affected Population",
            labels={'estimated_affected_patients': 'Estimated Patients', 'date': 'Date'}
        )
        
        st.plotly_chart(fig_patients, use_container_width=True)
    
    # District Comparison
    st.subheader("📍 District-Level Comparison")

    # Check if district column exists, if not, skip this section
    if 'district' in day_data.columns and len(day_data) > 0:
        district_summary = day_data.groupby('district').agg({
            'spike_percentage': 'mean',
            'estimated_affected_patients': 'sum',
            'daily_sales_units': 'sum'
        }).reset_index().sort_values('spike_percentage', ascending=False)
    else:
        st.info("No district data available for the selected date.")
        district_summary = pd.DataFrame()
    
    if not district_summary.empty:
        fig_district = px.bar(
            district_summary,
            x='district',
            y='spike_percentage',
            color='estimated_affected_patients',
            title="Disease Severity by District",
            labels={'spike_percentage': 'Avg Spike %', 'district': 'District'},
            color_continuous_scale='Reds'
        )

        st.plotly_chart(fig_district, use_container_width=True)
    
    st.divider()
    
    # Government Report Generator
    st.subheader("📄 Automated Government Health Report")
    
    st.info("💡 Generate comprehensive report for Ministry of Health / Health Authorities")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        report_type = st.selectbox(
            "Report Type",
            ["Daily Surveillance", "Outbreak Alert", "Weekly Summary", "Emergency Briefing"]
        )
    
    with col2:
        recipient = st.selectbox(
            "Recipient",
            ["Ministry of Health", "Disease Control Division", "Emergency Response", "All Authorities"]
        )
    
    with col3:
        urgency = st.selectbox(
            "Urgency Level",
            ["Routine", "Priority", "Urgent", "Critical"]
        )
    
    if st.button("📋 Generate Official Report", type="primary"):
        with st.spinner("Generating government health report..."):
            
            # Compile comprehensive report data
            report_context = f"""
OFFICIAL HEALTH SURVEILLANCE REPORT

Report Type: {report_type}
Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}
Recipient: {recipient}
Urgency: {urgency}

EXECUTIVE SUMMARY:
- Surveillance Network: {total_pharmacies} pharmacies across {branches_df['district'].nunique()} districts
- Alert Status: {active_alerts} active alerts
- Geographic Scope: {districts_affected} districts affected
- Population Impact: {day_data['estimated_affected_patients'].sum():,.0f} estimated affected individuals

DETAILED FINDINGS:
{network_summary}

CORRELATION ANALYSIS:
{st.session_state.get('correlation_analysis', 'Run correlation analysis first')}

DATA QUALITY:
- Data Sources: {total_pharmacies} pharmacy outlets
- Time Period: {disease_df['date'].min()} to {disease_df['date'].max()}
- Confidence Level: HIGH (based on {len(disease_df):,} data points)
"""
            
            prompt = f"""Generate an official government health surveillance report:

FORMAT REQUIREMENTS:
1. **Executive Summary** (2-3 sentences for minister/director)
2. **Key Findings** (bullet points, most critical info)
3. **Geographic Breakdown** (affected areas with numbers)
4. **Disease Identification** (suspected illness with confidence level)
5. **Population Impact** (estimated affected, at-risk groups)
6. **External Factors** (weather/events correlation)
7. **Trend Forecast** (next 3-5 days prediction)
8. **Immediate Recommendations** (urgent actions needed)
9. **Resource Allocation** (where to deploy resources)
10. **Communication Strategy** (public messaging needed?)

TONE: Professional, urgent but not alarmist, data-driven
AUDIENCE: Government health officials, policy makers
PRIORITY: {urgency}

Make it actionable and decision-ready."""
            
            government_report = generate_ai_insight(prompt, report_context, max_tokens=1500)
            
            st.markdown("### 📄 Official Health Report")
            
            # Display in formatted box
            st.markdown(f"""
            <div style='background: white; padding: 20px; border-left: 5px solid #e74c3c; border-radius: 5px;'>
                <h3 style='color: #e74c3c; margin-top: 0;'>🚨 HEALTH SURVEILLANCE REPORT</h3>
                <p style='color: #666; margin: 5px 0;'><b>Classification:</b> {urgency}</p>
                <p style='color: #666; margin: 5px 0;'><b>Recipient:</b> {recipient}</p>
                <p style='color: #666; margin: 5px 0;'><b>Date:</b> {datetime.now().strftime('%Y-%m-%d %H:%M')}</p>
                <hr>
            </div>
            """, unsafe_allow_html=True)
            
            st.success(government_report)
            
            # Download options
            col1, col2, col3 = st.columns(3)
            
            with col1:
                # Generate actual PDF
                pdf_content = f"""
{government_report}

**DATA SOURCES:**
• Network: {total_pharmacies} pharmacies
• Geographic Coverage: {branches_df['district'].nunique()} districts
• Data Points: {len(disease_df):,} records
• Time Period: {disease_df['date'].min()} to {disease_df['date'].max()}

**APPENDIX:**
Detailed pharmacy-level data available upon request.
"""

                pdf_bytes = generate_pdf_report(pdf_content, report_type, recipient, urgency)

                st.download_button(
                    label="📥 Download PDF Report",
                    data=pdf_bytes,
                    file_name=f"health_report_{report_type.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
                    mime="application/pdf"
                )
            
            with col2:
                # CSV data export
                available_cols = ['branch_name', 'spike_percentage', 'daily_sales_units', 'estimated_affected_patients', 'alert_level']
                if 'district' in day_data.columns:
                    available_cols.insert(1, 'district')

                csv_cols = [col for col in available_cols if col in day_data.columns]
                csv_data = day_data[csv_cols].to_csv(index=False) if len(day_data) > 0 else "No data available"
                
                st.download_button(
                    label="📊 Download Data (CSV)",
                    data=csv_data,
                    file_name=f"health_data_{datetime.now().strftime('%Y%m%d')}.csv",
                    mime="text/csv"
                )
            
            with col3:
                # Email notification (simulate)
                if st.button("📧 Send to Health Authority"):
                    st.success(f"✅ Report sent to {recipient}")
                    st.info("Email notification dispatched to:\n- director@moh.gov.sg\n- emergency@cdc.gov.sg")
    


def generate_external_factors(selected_date):
    """Simulate external factors data (in real system, fetch from APIs)"""
    
    # Simulate news (in production: newsapi.org, Google News API)
    news_data = [
        {
            'date': (selected_date - timedelta(days=2)).strftime('%Y-%m-%d'),
            'headline': 'Flu cases rising in Eastern Singapore, health officials monitoring'
        },
        {
            'date': (selected_date - timedelta(days=1)).strftime('%Y-%m-%d'),
            'headline': 'Heavy rainfall expected this week, potential increase in waterborne diseases'
        },
        {
            'date': selected_date.strftime('%Y-%m-%d'),
            'headline': 'Schools report increased student absenteeism due to respiratory infections'
        }
    ]
    
    # Simulate weather (in production: OpenWeatherMap, Weather.gov API)
    weather_data = [
        {
            'date': (selected_date - timedelta(days=2)).strftime('%Y-%m-%d'),
            'condition': 'Rainy',
            'temp': 24
        },
        {
            'date': (selected_date - timedelta(days=1)).strftime('%Y-%m-%d'),
            'condition': 'Rainy',
            'temp': 23
        },
        {
            'date': selected_date.strftime('%Y-%m-%d'),
            'condition': 'Cloudy',
            'temp': 25
        }
    ]
    
    # Simulate events (in production: Google Calendar API, Eventbrite)
    events_data = [
        {
            'date': (selected_date - timedelta(days=3)).strftime('%Y-%m-%d'),
            'event': 'Outdoor Music Festival at Marina Bay (50,000 attendees)'
        },
        {
            'date': (selected_date - timedelta(days=1)).strftime('%Y-%m-%d'),
            'event': 'National Day Celebration (mass gatherings)'
        }
    ]
    
    return {
        'news': news_data,
        'weather': weather_data,
        'events': events_data
    }